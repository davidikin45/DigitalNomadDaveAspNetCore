// <auto-generated />
using System;
using DND.Data.DynamicForms;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DND.Data.DynamicForms.Migrations
{
    [DbContext(typeof(DynamicFormsContext))]
    [Migration("20180922131126_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DND.Domain.DynamicForms.Forms.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmationText");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Name");

                    b.Property<bool>("Published");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UrlSlug");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.FormSectionSubmissions.FormSectionSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<Guid>("FormSubmissionId");

                    b.Property<string>("UrlSlug");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.Property<bool>("Valid");

                    b.HasKey("Id");

                    b.HasIndex("FormSubmissionId");

                    b.ToTable("FormSectionSubmission");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.FormSectionSubmissions.FormSectionSubmissionQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("FieldName");

                    b.Property<int>("FormSectionSubmissionId");

                    b.Property<string>("Question");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.HasIndex("FormSectionSubmissionId");

                    b.ToTable("FormSectionSubmissionQuestionAnswer");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.FormSubmissions.FormSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Completed");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("FormId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.Property<bool>("Valid");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormSubmission");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.LookupTables.LookupTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.ToTable("LookupTable");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.LookupTables.LookupTableItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("LookupTableId");

                    b.Property<string>("Text");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.HasIndex("LookupTableId");

                    b.ToTable("LookupTableItem");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("DefaultAnswer");

                    b.Property<string>("FieldName");

                    b.Property<string>("HelpText");

                    b.Property<int?>("LookupTableId");

                    b.Property<string>("Placeholder");

                    b.Property<string>("QuestionText");

                    b.Property<string>("QuestionTypeString")
                        .HasColumnName("QuestionType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.HasIndex("LookupTableId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Questions.QuestionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("LogicQuestionId");

                    b.Property<string>("LogicTypeString");

                    b.Property<int>("QuestionId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("LogicQuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionQuestion");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Questions.QuestionSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("LogicTypeString");

                    b.Property<string>("Name");

                    b.Property<int>("QuestionId");

                    b.Property<int>("SectionId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SectionId");

                    b.ToTable("QuestionSection");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Questions.QuestionValidation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomValidationMessage");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("QuestionId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.Property<string>("ValidationType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionValidation");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Sections.FormNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("FormId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormNotification");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Sections.FormSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("FormId");

                    b.Property<string>("Name");

                    b.Property<int>("SectionId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("SectionId");

                    b.ToTable("FormSection");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Sections.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("ShowInMenu");

                    b.Property<string>("UrlSlug");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Sections.SectionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<int>("QuestionId");

                    b.Property<int>("SectionId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionQuestion");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Sections.SectionSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildSectionId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Name");

                    b.Property<int>("SectionId");

                    b.Property<string>("UserCreated");

                    b.Property<string>("UserModified");

                    b.Property<string>("UserOwner");

                    b.HasKey("Id");

                    b.HasIndex("ChildSectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("SectionSection");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.FormSectionSubmissions.FormSectionSubmission", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.FormSubmissions.FormSubmission")
                        .WithMany("FormSectionSubmissions")
                        .HasForeignKey("FormSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.FormSectionSubmissions.FormSectionSubmissionQuestionAnswer", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.FormSectionSubmissions.FormSectionSubmission")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("FormSectionSubmissionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.FormSubmissions.FormSubmission", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.Forms.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.LookupTables.LookupTableItem", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.LookupTables.LookupTable")
                        .WithMany("LookupTableItems")
                        .HasForeignKey("LookupTableId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Questions.Question", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.LookupTables.LookupTable", "LookupTable")
                        .WithMany()
                        .HasForeignKey("LookupTableId");
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Questions.QuestionQuestion", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.Questions.Question", "LogicQuestion")
                        .WithMany()
                        .HasForeignKey("LogicQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DND.Domain.DynamicForms.Questions.Question")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Questions.QuestionSection", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.Questions.Question")
                        .WithMany("Sections")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DND.Domain.DynamicForms.Sections.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Questions.QuestionValidation", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.Questions.Question")
                        .WithMany("Validations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Sections.FormNotification", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.Forms.Form")
                        .WithMany("Notifications")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Sections.FormSection", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.Forms.Form")
                        .WithMany("Sections")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DND.Domain.DynamicForms.Sections.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Sections.SectionQuestion", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.Questions.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DND.Domain.DynamicForms.Sections.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DND.Domain.DynamicForms.Sections.SectionSection", b =>
                {
                    b.HasOne("DND.Domain.DynamicForms.Sections.Section", "ChildSection")
                        .WithMany()
                        .HasForeignKey("ChildSectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DND.Domain.DynamicForms.Sections.Section")
                        .WithMany("Sections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
